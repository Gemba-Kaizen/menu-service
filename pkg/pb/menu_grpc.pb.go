// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pb/menu.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MenuService_CreateFoodItem_FullMethodName = "/menu.MenuService/CreateFoodItem"
	MenuService_DeleteFoodItem_FullMethodName = "/menu.MenuService/DeleteFoodItem"
	MenuService_UpdateFoodItem_FullMethodName = "/menu.MenuService/updateFoodItem"
	MenuService_GetFoodItems_FullMethodName   = "/menu.MenuService/GetFoodItems"
)

// MenuServiceClient is the client API for MenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuServiceClient interface {
	CreateFoodItem(ctx context.Context, in *CreateFoodRequest, opts ...grpc.CallOption) (*CreateFoodResponse, error)
	DeleteFoodItem(ctx context.Context, in *DeleteFoodRequest, opts ...grpc.CallOption) (*DeleteFoodResponse, error)
	UpdateFoodItem(ctx context.Context, in *UpdateFoodRequest, opts ...grpc.CallOption) (*UpdateFoodResponse, error)
	GetFoodItems(ctx context.Context, in *GetFoodRequest, opts ...grpc.CallOption) (*GetFoodResponse, error)
}

type menuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuServiceClient(cc grpc.ClientConnInterface) MenuServiceClient {
	return &menuServiceClient{cc}
}

func (c *menuServiceClient) CreateFoodItem(ctx context.Context, in *CreateFoodRequest, opts ...grpc.CallOption) (*CreateFoodResponse, error) {
	out := new(CreateFoodResponse)
	err := c.cc.Invoke(ctx, MenuService_CreateFoodItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) DeleteFoodItem(ctx context.Context, in *DeleteFoodRequest, opts ...grpc.CallOption) (*DeleteFoodResponse, error) {
	out := new(DeleteFoodResponse)
	err := c.cc.Invoke(ctx, MenuService_DeleteFoodItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) UpdateFoodItem(ctx context.Context, in *UpdateFoodRequest, opts ...grpc.CallOption) (*UpdateFoodResponse, error) {
	out := new(UpdateFoodResponse)
	err := c.cc.Invoke(ctx, MenuService_UpdateFoodItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) GetFoodItems(ctx context.Context, in *GetFoodRequest, opts ...grpc.CallOption) (*GetFoodResponse, error) {
	out := new(GetFoodResponse)
	err := c.cc.Invoke(ctx, MenuService_GetFoodItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServiceServer is the server API for MenuService service.
// All implementations must embed UnimplementedMenuServiceServer
// for forward compatibility
type MenuServiceServer interface {
	CreateFoodItem(context.Context, *CreateFoodRequest) (*CreateFoodResponse, error)
	DeleteFoodItem(context.Context, *DeleteFoodRequest) (*DeleteFoodResponse, error)
	UpdateFoodItem(context.Context, *UpdateFoodRequest) (*UpdateFoodResponse, error)
	GetFoodItems(context.Context, *GetFoodRequest) (*GetFoodResponse, error)
	mustEmbedUnimplementedMenuServiceServer()
}

// UnimplementedMenuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMenuServiceServer struct {
}

func (UnimplementedMenuServiceServer) CreateFoodItem(context.Context, *CreateFoodRequest) (*CreateFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFoodItem not implemented")
}
func (UnimplementedMenuServiceServer) DeleteFoodItem(context.Context, *DeleteFoodRequest) (*DeleteFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFoodItem not implemented")
}
func (UnimplementedMenuServiceServer) UpdateFoodItem(context.Context, *UpdateFoodRequest) (*UpdateFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFoodItem not implemented")
}
func (UnimplementedMenuServiceServer) GetFoodItems(context.Context, *GetFoodRequest) (*GetFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoodItems not implemented")
}
func (UnimplementedMenuServiceServer) mustEmbedUnimplementedMenuServiceServer() {}

// UnsafeMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuServiceServer will
// result in compilation errors.
type UnsafeMenuServiceServer interface {
	mustEmbedUnimplementedMenuServiceServer()
}

func RegisterMenuServiceServer(s grpc.ServiceRegistrar, srv MenuServiceServer) {
	s.RegisterService(&MenuService_ServiceDesc, srv)
}

func _MenuService_CreateFoodItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).CreateFoodItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_CreateFoodItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).CreateFoodItem(ctx, req.(*CreateFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_DeleteFoodItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).DeleteFoodItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_DeleteFoodItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).DeleteFoodItem(ctx, req.(*DeleteFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_UpdateFoodItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).UpdateFoodItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_UpdateFoodItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).UpdateFoodItem(ctx, req.(*UpdateFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_GetFoodItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).GetFoodItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_GetFoodItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).GetFoodItems(ctx, req.(*GetFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuService_ServiceDesc is the grpc.ServiceDesc for MenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "menu.MenuService",
	HandlerType: (*MenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFoodItem",
			Handler:    _MenuService_CreateFoodItem_Handler,
		},
		{
			MethodName: "DeleteFoodItem",
			Handler:    _MenuService_DeleteFoodItem_Handler,
		},
		{
			MethodName: "updateFoodItem",
			Handler:    _MenuService_UpdateFoodItem_Handler,
		},
		{
			MethodName: "GetFoodItems",
			Handler:    _MenuService_GetFoodItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/menu.proto",
}
